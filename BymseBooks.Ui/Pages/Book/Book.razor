@page "/Book/{BookId:int}"
@implements IDisposable
@using BymseBooks.Ui.Models
@using BymseBooks.Core.Models
@using BymseBooks.Core
@using System.Net
@using BymseBooks.DataLayer.Entity
@inject BooksService BooksService
@inject IJSRuntime JsRuntime

<div class="book-page-container">
    <div class="control-panel">
        <div class="control-panel__left">
            <button class="control-panel__bookmarks-list-btn" type="button"></button>
            <div class="control-panel__title" title="@Title">@Title</div>
        </div>
        <div class="control-panel__center">
            @if(BookModel.Book.TotalPages.HasValue)
            {
                <div class="control-panel__pages">@CurrentPage / @BookModel.Book.TotalPages</div>
            }
        </div>
        <div class="control-panel__right">
            <div class="control-panel__scale">
                <button type="button">+</button>
                <span class="control-panel__scale_sep"></span>
                <button type="button">-</button>
            </div>
            <button class="control-panel__bookmarks-btn control-panel__bookmarks-btn_add"></button>
        </div>
    </div>
    <div class="book-wrapper">
        @if (ShowCover)
        {
            <div class="book-cover" onclick="@OnCoverClick">
                <BookCard Book="@BookModel.Book" ShowAuthor="true" NoLink="true"/>
            </div>
        }
        else
        {
            <div id="pdf-viewer-container" data-pdf-src="@GetUrl()">
                <div id="pdf-viewer" class="pdfViewer"></div>
            </div>
        }
    </div>
    <div class="side-buttons">
        <button type="button" class="side-buttons__delete"></button>
        <button type="button" class="side-buttons__edit"></button>
        <button type="button" class="side-buttons__full-size"></button>
    </div>
</div>

@code {

    [Parameter]
    public int BookId { get; set; }

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private BookExModel BookModel { get; set; }

    private bool ShowCover { get; set; } = true;

    private string GetUrl() => $"/user-file/{WebUtility.UrlEncode(new Uri(BookModel.Url).AbsolutePath)}";
    private string Title => $"{BookModel.Book.Title} by {BookModel.Book.Author}";
    private int CurrentPage { get; set; }
    
    private DotNetObjectReference<Book>? objectRef;
    private ITopBarItem? topBarItem;
    
    protected override void OnInitialized()
    {
        topBarItem = new LinkTopBarItem
        {
            Url = "/",
            Css = "top-bar__back-button"
        };
        MainLayout.Items.Add(topBarItem);

        BookModel = BooksService.FindBook(BookId);
        CurrentPage = BookModel.Bookmarks
            .LastOrDefault(e => e.Type == BookmarkType.LastPage)
            ?.Page ?? 0;
    }

    private async Task OnCoverClick()
    {
        if (!ShowCover)
        {
            return;
        }
        
        ShowCover = false;
        await Task.Delay(1);
        objectRef = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("PdfViewer.initialize", objectRef, CurrentPage);
    }
    
    [JSInvokable]
    public void OnPdfViewerInitialized(int totalPages)
    {
        BooksService.UpdateTotalPages(BookId, totalPages);
        BookModel.Book.TotalPages = totalPages;
    }
    
    [JSInvokable]
    public void OnCurrentPageChanged(int page)
    {
        CurrentPage = page;
        BooksService.UpdateLastPage(BookId, CurrentPage);
        StateHasChanged();
    }

    public void Dispose()
    {
        if (topBarItem != null)
        {
            MainLayout.Items.Remove(topBarItem);
        }
        objectRef?.Dispose();
    }

}