@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<div class="dropdown">
    @if (ShowMenu)
    {
        @ChildContent
    }
</div>

@code {

    [Parameter]
    public bool ShowMenu { get; set; }

    [Parameter]
    public string DropdownId { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; init; }

    private string DropdownSelector => $"[data-dropdown-id=\"{DropdownId}\"]";

    private DotNetObjectReference<Dropdown> objectRef;

    protected override async Task OnInitializedAsync()
    {
        objectRef = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync(
            "dropdown.handleOutsideClick",
            DropdownSelector,
            objectRef
        );
    }

    [JSInvokable]
    public void OnOutsideClick()
    {
        ShowMenu = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        objectRef.Dispose();
        await JsRuntime.InvokeVoidAsync("dropdown.dispose", DropdownSelector);
    }

}