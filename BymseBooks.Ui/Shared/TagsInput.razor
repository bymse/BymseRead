@using BymseBooks.Core
@using BymseBooks.DataLayer.Helpers
@inject TagsService TagsService
@inject IJSRuntime JsRuntime

<div class="book-form__tags">
    <div id="tag-width-measurer"></div>
    @foreach (var tag in TagInputs)
    {
        <input
            class="book-form__tag-input"
            data-tag-input
            @bind-value="@tag.Value"
            @bind-value:event="oninput"
            placeholder="@tag.OriginalValue"
            @onkeydown="args => OnTagKeyDown(args, tag)"
        />
    }
    <input type="text"
           class="book-form__tag-input"
           data-tag-input
           style="min-width: 80px;"
           @bind-value="NewTag"
           @bind-value:event="oninput"
           @onkeydown="OnNewTagKeyDown"
           placeholder="#newtag"
    />
</div>

@code {

    [Parameter]
    public IList<string> Tags { get; set; }

    private IList<TagWrapper> TagInputs { get; set; }
    private string NewTag { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        TagInputs = Tags.Select(e => new TagWrapper(e, e)).ToList();
        await InitAutoResize();
    }

    class TagWrapper
    {
        public TagWrapper(string value, string originalValue)
        {
            OriginalValue = originalValue;
            Value = value;
        }

        public string Value { get; set; }
        public string OriginalValue { get; set; }
    }

    private async Task OnNewTagKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            var tagToAdd = NewTag.StartsWith('#') ? NewTag : "#" + NewTag;
            TagInputs.Add(new TagWrapper(tagToAdd, ""));
            NewTag = "";
            StateHasChanged();
            await InitAutoResize();
            UpdateSourceTags();
        }
    }

    private async Task OnTagKeyDown(KeyboardEventArgs args, TagWrapper tag)
    {
        if (args.Key == "Backspace" && tag.OriginalValue.IsNullOrEmpty())
        {
            TagInputs.Remove(tag);
            StateHasChanged();
            UpdateSourceTags();
        }
    }
    
    private void UpdateSourceTags()
    {
        Tags = TagInputs
            .Select(e => e.Value)
            .Where(e => !e.IsNullOrEmpty()).ToList();
    }

    private async Task InitAutoResize()
    {
        await Task.Delay(1);
        await JsRuntime.InvokeVoidAsync("initializeTagsInputs");
    }

}