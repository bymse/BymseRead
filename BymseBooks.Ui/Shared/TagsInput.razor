@using BymseBooks.Core
@using BymseBooks.DataLayer.Helpers
@inject TagsService TagsService
@inject IJSRuntime JsRuntime

<div class="book-form__tags">
    <div id="tag-width-measurer"></div>
    @foreach (var tag in TagInputs)
    {
        <span class="book-form__tag">
            <input
                class="book-form__tag-input"
                data-tag-input
                @bind-value="@tag.Value"
                @bind-value:event="oninput"
                @onkeydown="args => OnTagKeyDown(args, tag)"/>
            <span class="book-form__tag-prefix">#</span>
        </span>
    }
    <span class="book-form__tag book-form__tag-new">
        <input type="text"
               class="book-form__tag-input"
               data-tag-input
               style="min-width: 80px;"
               @bind-value="NewTag"
               @bind-value:event="oninput"
               @onkeydown="OnNewTagKeyDown"
               placeholder="newtag"/>
        <span class="book-form__tag-prefix">#</span>
    </span>
</div>

@code {

    [Parameter]
    public string[] Tags { get; set; }
    
    [Parameter]
    public EventCallback<string[]> TagsChanged { get; set; }

    private IList<TagWrapper> TagInputs { get; set; }
    private string NewTag { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        TagInputs = Tags.Select(e => new TagWrapper(e)).ToList();
        await InitTags();
    }

    class TagWrapper
    {
        public TagWrapper(string value)
        {
            Value = value;
        }

        public string Value { get; set; }
    }

    private async Task OnNewTagKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            var tagToAdd = NewTag.StartsWith('#') ? NewTag.TrimStart('#') : NewTag;
            TagInputs.Add(new TagWrapper(tagToAdd));
            NewTag = "";
            StateHasChanged();
            await InitTags();
            await UpdateSourceTagsAsync();
        }
    }

    private async Task OnTagKeyDown(KeyboardEventArgs args, TagWrapper tag)
    {
        if (args.Key == "Backspace" && tag.Value.IsNullOrEmpty())
        {
            TagInputs.Remove(tag);
            StateHasChanged();
            await UpdateSourceTagsAsync();
        }
    }

    private async Task UpdateSourceTagsAsync()
    {
        var tags = TagInputs
            .Select(e => e.Value)
            .Where(e => !e.IsNullOrEmpty())
            .ToArray();
        await TagsChanged.InvokeAsync(tags);
    }

    private async Task InitTags()
    {
        await Task.Delay(1);
        await JsRuntime.InvokeVoidAsync("initializeTagsInputs");
    }

}