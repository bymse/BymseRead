@using Microsoft.AspNetCore.Components
@using BymseBooks.Core.Models
@using BymseBooks.DataLayer.Entity
@using BymseBooks.DataLayer.Helpers
@using BymseBooks.Ui.Abstractions
@inject IFilePickHandler FilePickHandler

<Modal OnClose="OnClose">
    <EditForm class="book-form" Model="@this">
        <h2 class="book-form__title">@FormTitle</h2>
        <InputText @bind-Value="@BookTitle" placeholder="Title..." type="text" class="book-form__text-input"/>
        <InputText @bind-Value="@BookAuthor" placeholder="Author..." type="text" class="book-form__text-input"/>
        <div class="book-form__file-wrapper">
            <InputText @bind-Value="@BookFile" placeholder="File..." class="book-form__text-input"/>
            <button type="button" class="button button_small" onclick="@SelectFileAsync">Select file</button>
        </div>
        <Select @bind-Value="@Model.Book.State" Options="@(Enum.GetValues<BookState>())"></Select>
        <TagsInput @bind-Tags="@BookTags"/>
        <div class="buttons-line">
            <button type="button" class="button" onclick="@Submit">Submit</button>
            <button type="button" class="button" onclick="@OnClose">Cancel</button>
        </div>
    </EditForm>
</Modal>

@code {

    [Parameter]
    public BookExModel Model { get; set; } = new();

    [Parameter]
    public string FormTitle { get; init; }

    [Parameter]
    public Action OnClose { get; set; }
    
    [Parameter]
    public Func<Task> OnSubmit { get; set; }
    
    private string BookTitle { get; set; }
    private string BookAuthor { get; set; }
    private string BookFile { get; set; }
    private string[] BookTags { get; set; }

    protected override void OnInitialized()
    {
        BookTitle = Model.Book.Title;
        BookAuthor = Model.Book.Author;
        BookFile = Model.Url.IfNotNullOrEmpty(e => new Uri(e).LocalPath);
        BookTags = Model.Book.Tags;
    }
    
    private async Task SelectFileAsync()
    {
        var fullPath = await FilePickHandler.HandleAsync();
        if (!fullPath.IsNullOrEmpty())
        {
            BookFile = fullPath;
        }
    }

    private async Task Submit()
    {
        Model.Book.Title = BookTitle;
        Model.Book.Author = BookAuthor;
        Model.Book.Tags = BookTags;
        if (!BookFile.IsNullOrEmpty())
        {
            Model.Url = new UriBuilder()
            {
                Path = BookFile,
                Scheme = Uri.UriSchemeFile,
                Host = null
            }.Uri.ToString();
        }

        Model.Book.Tags = BookTags;
        
        await OnSubmit();
    }
}