/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createBooksCollectionInfoFromDiscriminatorValue, createCreatedBookResultFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, serializeCreateBookRequest, serializeCreatedBookResult, type BooksCollectionInfo, type CreateBookRequest, type CreatedBookResult, type ProblemDetails } from '../../models/index.js';
// @ts-ignore
import { type WithBookItemRequestBuilder, WithBookItemRequestBuilderNavigationMetadata, WithBookItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /web-api/books
 */
export interface BooksRequestBuilder extends BaseRequestBuilder<BooksRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.webApi.books.item collection
     * @param bookId Unique identifier of the item
     * @returns {WithBookItemRequestBuilder}
     */
     byBookId(bookId: Guid) : WithBookItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BooksCollectionInfo>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     get(requestConfiguration?: RequestConfiguration<BooksRequestBuilderGetQueryParameters> | undefined) : Promise<BooksCollectionInfo | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CreatedBookResult>}
     * @throws {ProblemDetails} error when the service returns a 400 status code
     */
     post(body: CreateBookRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CreatedBookResult | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BooksRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateBookRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface BooksRequestBuilderGetQueryParameters {
    search?: string;
}
/**
 * Uri template for the request builder.
 */
export const BooksRequestBuilderUriTemplate = "{+baseurl}/web-api/books{?search*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BooksRequestBuilderNavigationMetadata: Record<Exclude<keyof BooksRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byBookId: {
        requestsMetadata: WithBookItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithBookItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["bookId"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BooksRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: BooksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBooksCollectionInfoFromDiscriminatorValue,
    },
    post: {
        uriTemplate: BooksRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            400: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCreatedBookResultFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateBookRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
