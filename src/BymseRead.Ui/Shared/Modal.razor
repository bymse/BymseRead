@using BymseRead.DataLayer.Helpers
@inject IJSRuntime JsRuntime
@implements IDisposable

@if(Show)
{
    <div class="modal__overlay" @onclick="OnClose">
        <div class="modal" @onclick:stopPropagation="true">
            <div class="modal__content">
                @if (!ModalTitle.IsNullOrEmpty())
                {
                    <h2 class="modal__title">@ModalTitle</h2>
                }
                @ChildContent
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public bool Show { get; set; }
    
    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    private DotNetObjectReference<Modal> objectReference = null!;

    protected override async Task OnInitializedAsync()
    {
        objectReference = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeAsync<object>("onEscapeKeyDown", objectReference, nameof(OnEscape));
    }

    private Task OnClose()
    {
        Show = false;
        return ShowChanged.InvokeAsync(Show);
    }

    [Parameter]
    public string ModalTitle { get; set; }

    [JSInvokable]
    public Task OnEscape()
    {
        if (Show)
        {
            return OnClose();
        }
        
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        objectReference.Dispose();
    }
}