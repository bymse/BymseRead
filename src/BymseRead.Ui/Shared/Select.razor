@using System.Linq.Expressions
@typeparam TValue

<div class="select__wrapper">
    <button data-dropdown-id="@dropdownID" @onclick="OpenMenu" type="button" class="select__value @(showMenu ? "select__value_opened" : "")">@Value</button>
    <Dropdown @bind-ShowMenu="@showMenu" DropdownId="@dropdownID" Class="select__dropdown">
        <div class="select">
            @foreach (var option in Options)
            {
                <div
                    class="select__option @(option!.Equals(Value) ? "select__option_selected" : "")"
                    @onclick="() => OnSelect(option)"
                    >@option</div>
            }
        </div>
    </Dropdown>
</div>

@code {


    [Parameter]
    public TValue[] Options { get; set; }

    [Parameter]
    public virtual TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TValue>> ValueExpression { get; set; }

    private bool showMenu;

    private void OpenMenu() => showMenu = true;

    private async Task OnSelect(TValue option)
    {
        Value = option;
        await ValueChanged.InvokeAsync(Value);
        showMenu = false;
    }
    
    private string dropdownID;

    protected override void OnInitialized()
    {
        dropdownID = typeof(TValue).Name + Random.Shared.Next(100);
    }

}