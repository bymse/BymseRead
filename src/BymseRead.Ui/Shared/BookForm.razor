@using Microsoft.AspNetCore.Components
@using BymseRead.Core.Models
@using BymseRead.DataLayer.Entity
@using BymseRead.DataLayer.Helpers
@using BymseRead.Ui.Abstractions
@inject IFilePickHandler FilePickHandler

<Modal Show="Show" ShowChanged="ShowChanged" ModalTitle="@FormTitle">
    <EditForm class="form" Model="@this" OnSubmit="Submit">
        <InputText @bind-Value="@BookTitle" placeholder="Title..." type="text" class="form__text-input"/>
        <InputText @bind-Value="@BookAuthor" placeholder="Author..." type="text" class="form__text-input"/>
        <div class="form__file-wrapper">
            <InputText @bind-Value="@BookFile" placeholder="File..." class="form__text-input"/>
            <button type="button" class="button button_small" @onclick="SelectFileAsync">Select file</button>
        </div>
        <Select @bind-Value="@Model.State" Options="@(Enum.GetValues<BookState>())"></Select>
        <TagsInput @bind-Tags="@BookTags"/>
        <ModalButtons>
            <button type="submit" class="button">Submit</button>
            <button type="button" class="button" @onclick="Close">Cancel</button>
        </ModalButtons>
    </EditForm>
</Modal>

@code {

    [Parameter]
    public BookModel Model { get; set; } = new();

    [Parameter]
    public string FormTitle { get; init; }

    [Parameter]
    public bool Show { get; set; }
    
    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }

    [Parameter]
    public Func<Task> OnSubmit { get; set; }

    private string BookTitle { get; set; }
    private string BookAuthor { get; set; }
    private string BookFile { get; set; }
    private string[] BookTags { get; set; }

    protected override void OnInitialized()
    {
        @if (!Show)
        {
            return;
        }
        
        BookTitle = Model.Title;
        BookAuthor = Model.Author;
        BookFile = Model.Url.IfNotNullOrEmpty(e => new Uri(e).LocalPath);
        BookTags = Model.Tags;
    }

    private async Task SelectFileAsync()
    {
        var fullPath = await FilePickHandler.HandleAsync();
        if (!fullPath.IsNullOrEmpty())
        {
            BookFile = fullPath;
        }
    }

    private async Task Submit()
    {
        Model.Title = BookTitle;
        Model.Author = BookAuthor;
        Model.Tags = BookTags;
        if (!BookFile.IsNullOrEmpty())
        {
            Model.Url = new UriBuilder()
            {
                Path = BookFile,
                Scheme = Uri.UriSchemeFile,
                Host = null
            }.Uri.ToString();
        }

        Model.Tags = BookTags;

        await OnSubmit();
    }

    private Task Close()
    {
        Show = false;
        return ShowChanged.InvokeAsync(Show);
    }

}