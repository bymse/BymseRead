@page "/Book/{BookId:int}"
@implements IDisposable
@using BymseRead.Ui.Models
@using BymseRead.Ui.Pages.Book.Bookmarks
@using BymseRead.Core
@using BymseRead.DataLayer.Helpers
@using BymseRead.Ui.Models.Book
@using BookForm = BymseRead.Core.Models.BookFormModel
@inject BooksService BooksService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject BookPageState State

<div class="book-page-container">
    <div class="control-panel">
        <div class="control-panel__left">
            <button class="control-panel__bookmarks-list-btn" type="button" @onclick="State.ToggleBookmarks"></button>
            <div class="control-panel__title" title="@State.Title">@State.Title</div>
        </div>
        <div class="control-panel__center">
            @if (State.Book.TotalPages.HasValue)
            {
                <div class="control-panel__pages">
                    <PagesInput
                        TotalPages="@State.Book.TotalPages.Value"
                        @bind-Page="State.CurrentPage"
                        Class="control-panel__pages-input"/>
                </div>
            }
        </div>
        <div class="control-panel__right">
            <div class="control-panel__tags" title="@State.Book.TagsWithHashes.JoinStrings(" ")">
                @foreach (var tag in State.Book.TagsWithHashes)
                {
                    <span>@tag</span>
                }
            </div>
            @* <button class="control-panel__bookmarks-btn control-panel__bookmarks-btn_add"></button> *@
            <button type="button" class="control-panel__edit" @onclick="State.OpenEditForm"></button>
            <DeleteButton Book="State.Book"/>
        </div>
    </div>
    <div class="book-content" id="book-content">
        <Bookmarks
            Book="State.Book"
            @bind-CurrentPage="State.CurrentPage"
            Show="@State.ShowBookmarks"/>
        <div class="book-wrapper">
            <PdfViewer
                @bind-CurrentPage="State.CurrentPage"
                @bind-TotalPages="State.Book.TotalPages"
                @bind-TotalPages:after="AfterTotalPagesSet"
                BookLoadUrl="@State.BookLoadUrl"/>
        </div>
        @* <div class="side-buttons"> *@
        @*     <button type="button" class="@(IsFullscreen ? "side-buttons__full-size_full" : "side-buttons__full-size")" @onclick="ToggleFullscreen"></button> *@
        @* </div> *@
    </div>
</div>
@if (State.ShowEditForm)
{
    <BookForm
        FormTitle="Edit book"
        Model="@State.Book"
        @bind-Show="State.ShowEditForm"
        OnSubmit="@OnFormSubmit"/>
}

@code {

    [Parameter]
    public int BookId { get; set; }

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private bool IsFullscreen { get; set; }


    private ITopBarItem? topBarItem;


    protected override async Task OnInitializedAsync()
    {
        topBarItem = new LinkTopBarItem
        {
            Url = "/",
            Css = "top-bar__back-button"
        };
        MainLayout.Items.Add(topBarItem);

        State.SetBook(BooksService.FindBook(BookId)!);
    }


    private async Task OnFormSubmit()
    {
        State.SetBook(BooksService.SaveBook(State.Book));
        State.ShowEditForm = false;
        StateHasChanged();
        await Task.Delay(1);
    }

    private Task AfterTotalPagesSet()
    {
        BooksService.UpdateTotalPages(BookId, State.Book.TotalPages!.Value);
        return Task.CompletedTask;
    }

    private async Task ToggleFullscreen()
    {
        IsFullscreen = !IsFullscreen;
        if (IsFullscreen)
        {
            await JsRuntime.InvokeVoidAsync("openFullscreen", "#book-content");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("exitFullscreen");
        }
    }

    public void Dispose()
    {
        if (topBarItem != null)
        {
            MainLayout.Items.Remove(topBarItem);
        }
    }

}