@page "/Book/{BookId:int}"
@implements IDisposable
@using BymseRead.Ui.Models
@using BymseRead.Core.Models
@using BymseRead.Core
@using System.Net
@using BymseRead.DataLayer.Entity
@using BymseRead.DataLayer.Helpers
@using BymseRead.Ui.Abstractions
@using BookForm = BymseRead.Core.Models.BookFormModel
@inject BooksService BooksService
@inject IJSRuntime JsRuntime

<div class="book-page-container">
    <div class="control-panel">
        <div class="control-panel__left">
            @* <button class="control-panel__bookmarks-list-btn" type="button" @onclick="ToggleBookmarks"></button> *@
            <div class="control-panel__title" title="@Title">@Title</div>
        </div>
        <div class="control-panel__center">
            @if (BookModel.Book.TotalPages.HasValue)
            {
                <div class="control-panel__pages">
                    <PagesInput
                        TotalPages="@BookModel.Book.TotalPages.Value"
                        InitialCurrentPage="initialCurrentPage"
                        BookPagesFacade="pdfViewerContainer"/>
                </div>
            }
        </div>
        <div class="control-panel__right">
            <div class="control-panel__tags" title="@BookModel.Book.TagsWithHashes.JoinStrings(" ")">
                @foreach (var tag in BookModel.Book.TagsWithHashes)
                {
                    <span>@tag</span>
                }
            </div>
            @* <button class="control-panel__bookmarks-btn control-panel__bookmarks-btn_add"></button> *@
            <button type="button" class="control-panel__edit" onclick="@OnEditClick"></button>
            <DeleteButton Book="BookModel"/>
        </div>
    </div>
    <div class="book-content" id="book-content">
        @if (OpenBookmarksList)
        {
            <Bookmarks Model="BookModel"/>
        }
        <div class="book-wrapper">
            <PdfViewer @ref="pdfViewerContainer.PdfViewer" InitialCurrentPage="initialCurrentPage" BookUrl="@BookModel.Url"></PdfViewer>
        </div>
        @* <div class="side-buttons"> *@
        @*     <button type="button" class="@(IsFullscreen ? "side-buttons__full-size_full" : "side-buttons__full-size")" @onclick="ToggleFullscreen"></button> *@
        @* </div> *@
    </div>
</div>

@if (OpenEditForm)
{
    <BookForm FormTitle="Edit book" Model="@BookModel" OnClose="@OnClose" OnSubmit="@OnFormSubmit"/>
}

@code {

    [Parameter]
    public int BookId { get; set; }

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private BookExModel BookModel { get; set; }
    

    private string Title => $"{BookModel.Book.Title} by {BookModel.Book.Author}";
    private int initialCurrentPage;

    private bool OpenEditForm { get; set; }
    private bool OpenBookmarksList { get; set; }
    private bool IsFullscreen { get; set; }

    private void OnClose() => OpenEditForm = false;
    
    private readonly PdfViewerContainer pdfViewerContainer = new();
    private ITopBarItem? topBarItem;


    protected override async Task OnInitializedAsync()
    {
        topBarItem = new LinkTopBarItem
        {
            Url = "/",
            Css = "top-bar__back-button"
        };
        MainLayout.Items.Add(topBarItem);

        BookModel = BooksService.FindBook(BookId);
        initialCurrentPage = BookModel.Bookmarks
            .LastOrDefault(e => e.Type == BookmarkType.LastViewedPage)
            ?.Page ?? 0;
        
        pdfViewerContainer.ViewerInitialized += OnPdfViewerContainerInitialized;
        pdfViewerContainer.PageChanged += OnCurrentPageChanged;
    }

    private void OnEditClick()
    {
        OpenEditForm = true;
    }

    private void ToggleBookmarks() => OpenBookmarksList = !OpenBookmarksList;

    private async Task OnFormSubmit()
    {
        BookModel = BooksService.SaveBook(BookModel);
        OpenEditForm = false;
        StateHasChanged();
        await Task.Delay(1);
        //await InitializePdfViewerAsync();
    }

    private Task OnPdfViewerContainerInitialized(IBookViewerFacade sender, ViewerInitializedEventArgs e)
    {
        BooksService.UpdateTotalPages(BookId, e.TotalPages);
        BookModel.Book.TotalPages = e.TotalPages;
        return Task.CompletedTask;
    }

    private async Task ToggleFullscreen()
    {
        IsFullscreen = !IsFullscreen;
        if (IsFullscreen)
        {
            await JsRuntime.InvokeVoidAsync("openFullscreen", "#book-content");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("exitFullscreen");
        }
    }

    private async Task OnCurrentPageChanged(IBookPagesFacade sender, PageChangeEventArgs e)
    {
        BooksService.UpdateLastViewedPage(BookId, e.NewPage);
    }

    public void Dispose()
    {
        if (topBarItem != null)
        {
            MainLayout.Items.Remove(topBarItem);
        }
        pdfViewerContainer.Dispose();
    }

}