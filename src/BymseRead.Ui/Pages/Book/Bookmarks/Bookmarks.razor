@using BymseRead.Core.Models
@using BymseRead.Ui.Abstractions
@using BymseRead.Core
@using BymseRead.Ui.Models.Book
@inject BookmarksService BookmarksService
@inject BookPageState BookPageState

@if (BookPageState.ShowBookmarks)
{
    <section class="bookmarks">
        <h2 class="bookmarks__title">Bookmarks</h2>
        <div class="bookmarks__buttons">
            <button class="bookmarks__button bookmarks__button_add" @onclick="OnAdd">New bookmark</button>
            <button class="bookmarks__button bookmarks__button_last-page" @onclick="OnMarkAsLastPage">Mark as last page</button>
        </div>
        <BookmarksList OnEdit="OnEdit" OnClick="OnClick" Bookmarks="bookmarksList" Book="BookPageState.Book"/>
    </section>

    if (showBookmarkForm)
    {
        <BookmarkForm
            @bind-Show="showBookmarkForm"
            Bookmark="formBookmark"
            TotalPages="@BookPageState.Book.TotalPages"
            OnSubmit="OnFormSubmit"/>
    }
}

@code {


    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }


    private BookModel BookModel => BookPageState.Book;
    private bool showBookmarkForm = false;
    private BookmarksListModel bookmarksList;
    private BookmarkModel? formBookmark;

    protected override void OnInitialized()
    {
        bookmarksList = BookmarksService.GetBookmarksList(BookModel);
    }

    protected override void OnParametersSet()
    {
        BookmarksService.SetLastViewedPage(BookModel.Id, CurrentPage);
    }

    private void OnMarkAsLastPage(MouseEventArgs obj)
    {
        BookmarksService.SetLastPage(BookModel.Id, CurrentPage);
        bookmarksList = BookmarksService.GetBookmarksList(BookModel);
        StateHasChanged();
    }

    private void OnAdd()
    {
        formBookmark = new BookmarkModel
        {
            Page = CurrentPage
        };
        showBookmarkForm = true;
        StateHasChanged();
    }

    private Task OnEdit(BookmarkModel bookmarkModel)
    {
        formBookmark = bookmarkModel;
        showBookmarkForm = true;
        StateHasChanged();
        
        return Task.CompletedTask;
    }

    private async Task OnClick(BookmarkModel bookmarkModel)
    {
        CurrentPage = bookmarkModel.Page;
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    private Task OnFormSubmit(BookmarkModel model)
    {
        BookmarksService.SaveBookmark(model, BookModel.Id);
        bookmarksList = BookmarksService.GetBookmarksList(BookModel);
        OnBookmarkFormClose();

        return Task.CompletedTask;
    }

    private void OnBookmarkFormClose()
    {
        showBookmarkForm = false;
        formBookmark = null;
        StateHasChanged();
    }

}