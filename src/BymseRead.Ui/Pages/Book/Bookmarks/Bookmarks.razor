@using BymseRead.Core.Models
@using BymseRead.Ui.Abstractions
@using BymseRead.Core
@inject BookmarksService BookmarksService

@if (Show)
{
    <section class="bookmarks">
        <h2 class="bookmarks__title">Bookmarks</h2>
        <div class="bookmarks__buttons">
            <button class="bookmarks__button bookmarks__button_add" @onclick="OnAdd">New bookmark</button>
            <button class="bookmarks__button bookmarks__button_last-page" @onclick="OnMarkAsLastPage">Mark as last page</button>
        </div>
        <BookmarksList OnEdit="OnEdit" Bookmarks="BookmarksList" Book="BookModel"/>
    </section>
    
    @if (showBookmarkForm)
    {
        <BookmarkForm OnClose="OnBookmarkFormClose" Bookmark="formBookmark">
            
        </BookmarkForm>
    }
}

@code {

    [Parameter]
    public int InitialCurrentPage { get; set; }

    [Parameter]
    public BookModel BookModel { get; set; }

    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public IBookPagesFacade BookPagesFacade { get; set; }

    private int currentPage;
    private BookmarksListModel BookmarksList { get; set; }

    private bool showBookmarkForm = false;
    private BookmarkModel? formBookmark;

    protected override void OnInitialized()
    {
        currentPage = InitialCurrentPage;
        BookmarksList = BookmarksService.GetBookmarksList(BookModel);
        BookPagesFacade.PageChanged += OnPageChanged;
    }

    private async Task OnPageChanged(object sender, PageChangeEventArgs e)
    {
        currentPage = e.NewPage;
        BookmarksService.SetLastViewedPage(BookModel.Id, e.NewPage);
    }

    private void OnMarkAsLastPage(MouseEventArgs obj)
    {
        BookmarksService.SetLastPage(BookModel.Id, currentPage);
        BookmarksList = BookmarksService.GetBookmarksList(BookModel);
        StateHasChanged();
    }

    private void OnAdd()
    {
        showBookmarkForm = true;
        formBookmark = new BookmarkModel();
        StateHasChanged();
    }

    private Task OnEdit(BookmarkModel bookmarkModel)
    {
        formBookmark = bookmarkModel;
        showBookmarkForm = true;
        StateHasChanged();

        return Task.CompletedTask;
    }
    
    private void OnBookmarkFormClose()
    {
        showBookmarkForm = false;
        formBookmark = null;
        StateHasChanged();
    }

}