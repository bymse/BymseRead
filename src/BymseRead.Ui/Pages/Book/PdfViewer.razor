@using BymseRead.Ui.Abstractions
@using BymseRead.DataLayer.Helpers
@using System.Net
@using BymseRead.Ui.Models.Book
@implements IDisposable
@inject IJSRuntime JsRuntime

<div id="pdf-viewer-container" data-pdf-src="@BookLoadUrl">
    <div id="pdf-viewer" class="pdfViewer"></div>
</div>

@code {

    private string? previousBookUrl = default;
    private bool didPageChange = false;

    [Parameter]
    public string BookLoadUrl { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    [Parameter]
    public int? TotalPages { get; set; }

    [Parameter]
    public EventCallback<int?> TotalPagesChanged { get; set; }

    private DotNetObjectReference<PdfViewer>? objectRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializePdfViewer();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (previousBookUrl != null && previousBookUrl != BookLoadUrl)
        {
            previousBookUrl = BookLoadUrl;
            await InitializePdfViewer();
            return;
        }

        if (objectRef != null && !didPageChange)
        {
            await JsRuntime.InvokeVoidAsync("PdfViewer.setCurrentPage", CurrentPage);
        }
        didPageChange = false;
    }

    private async Task InitializePdfViewer()
    {
        objectRef?.Dispose();
        if (!BookLoadUrl.IsNullOrEmpty())
        {
            objectRef = DotNetObjectReference.Create(this);
            previousBookUrl = BookLoadUrl;
            await JsRuntime.InvokeVoidAsync("PdfViewer.initialize", objectRef, CurrentPage);
        }
    }

    [JSInvokable]
    public async Task OnPdfViewerInitialized(int totalPages)
    {
        TotalPages = totalPages;
        await TotalPagesChanged.InvokeAsync(totalPages);
    }

    [JSInvokable]
    public async Task OnCurrentPageChanged(int page)
    {
        didPageChange = true;
        await CurrentPageChanged.InvokeAsync(page);
    }

    public void Dispose()
    {
        objectRef?.Dispose();
    }

}