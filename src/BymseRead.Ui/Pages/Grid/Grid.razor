@page "/"
@page "/Grid"
@using BymseRead.Core.Models
@using BymseRead.DataLayer.Entity
@using BymseRead.Core
@inject BooksService BooksService
@inject IJSRuntime JsRuntime

<div class="books-grid__container" id="books-grid">
    @foreach (var (state, books) in sections)
    {
        <section>
            <h2 class="books-grid__title" id="@state">@state</h2>
            <div class="books-grid">
                @foreach (var book in books)
                {
                    <BookCard Book="book"/>
                }
            </div>
        </section>
    }

    @if (sections.Count > 0)
    {
        <div class="load-more">
            @if (nextState != null)
            {
                <button type="button" title="Load more" class="button-icon button-icon_down" @onclick="LoadBooks"></button>
            }
            else
            {
                <span class="load-more__text">All books are here</span>
                <button type="button" class="button-icon button-icon_up" @onclick="ScrollUp"></button>
            }
        </div>
    }
    else
    {
        <span class="no-books">There are no books here. Use top left button to add some.</span>
    }
</div>


@code {

    private BookState? nextState = BookState.Active;

    private List<(BookState state, BookModel[] books)> sections = new();

    protected override async Task OnInitializedAsync()
    {
        nextState = BookState.Active;
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        if (!nextState.HasValue)
        {
            return;
        }

        var state = nextState!.Value;
        var loadedBooks = BooksService.GetBooks(state);
        nextState = GetNextState(nextState.Value);
        if (loadedBooks.Length == 0)
        {
            await LoadBooks();
            return;
        }

        sections.Add((state, loadedBooks));
        await Task.Delay(1);
        await ScrollToStateHeader(state);
    }

    private async Task ScrollUp() => await JsRuntime.InvokeAsync<object>("scrollGridTop");

    private async Task ScrollToStateHeader(BookState state) => await JsRuntime.InvokeAsync<object>("scrollToStateHeader", state.ToString());

    private static BookState? GetNextState(BookState current)
    {
        return current switch 
        {
            
            BookState.Active => BookState.Paused,
            BookState.Paused => BookState.New,
            BookState.New => BookState.Finished,
            BookState.Finished => null,
            _ => null
            };
    }

}